@page "/fetchdata"
@using BlazorEpic.Shared
@inject HttpClient Http
@inject IJSRuntime jsr

<UserComponent></UserComponent>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>
@if (string.IsNullOrEmpty(userdata))
{
    <p><a href="/login">LOGIN TO ACCESS THIS DATA</a></p>
}
else if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private WeatherForecast[] forecasts;
    string userdata = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        userdata = await jsr.InvokeAsync<string>("localStorage.getItem", "user").ConfigureAwait(false);
        if (!string.IsNullOrWhiteSpace(userdata))
        {
            var dataArray = userdata.Split(';', 2);
            var requestMsg = new HttpRequestMessage(HttpMethod.Get, "/api/weatherforecast");
            requestMsg.Headers.Add("Authorization", "Bearer " + dataArray[1]);
            var response = await Http.SendAsync(requestMsg);
            if (response.IsSuccessStatusCode)
                forecasts = await response.Content.ReadFromJsonAsync<WeatherForecast[]>();
        }
    }

}